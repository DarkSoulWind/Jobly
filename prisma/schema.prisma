generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  email         String?         @unique
  emailVerified DateTime?
  id            String          @id @default(cuid())
  image         String?         @default("https://i.pinimg.com/236x/8e/73/0c/8e730ce55fb0199e7dc0bf76672e8dc6.jpg")
  name          String          @unique
  password      String?
  phoneNumber   String?
  online        Boolean         @default(false)
  accounts      Account[]
  comments      Comment[]
  following     Follow[]        @relation("follower")
  followers     Follow[]        @relation("following")
  interests     UserInterest[]
  sentMessages  Message[]       @relation("sender")
  participants  Participant[]
  postLikes     PostLike[]
  posts         Post[]          @relation("posts")
  sessions      Session[]
  savedJobs     SavedJob[]      @relation("user")
  preferences   UserPreference?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreference {
  userID        String  @unique @id
  firstName     String?
  lastName      String?
  pronouns      String?
  countryRegion String?
  postalCode    String?
  city          String?
  school        String?
  phoneType     String?
  banner        String? @default("https://swall.teahub.io/photos/small/303-3034192_default-banner-banner-jpg.jpg")
  bio           String?
  user          User    @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model Post {
  id         String     @id @default(uuid())
  userID     String
  datePosted DateTime   @default(now())
  postText   String     @db.VarChar(280)
  image      String?
  imageRef   String?
  user       User       @relation("posts", fields: [userID], references: [id], onDelete: Cascade)
  comments   Comment[]
  postLikes  PostLike[]
}

model PostLike {
  userID String
  postID String
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postID], references: [id], onDelete: Cascade)

  @@id([userID, postID])
}

model Interest {
  name      String         @id @unique
  interests UserInterest[]
}

model UserInterest {
  userID   String
  name     String
  user     User     @relation(fields: [userID], references: [id], onDelete: Cascade)
  interest Interest @relation(fields: [name], references: [name], onDelete: Cascade)

  @@id([userID, name])
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Comment {
  id          String   @id @default(uuid())
  userID      String
  postID      String
  commentText String
  datePosted  DateTime @default(now())
  post        Post     @relation(fields: [postID], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([postID, userID])
}

model Chat {
  id           String        @id @default(uuid())
  name         String
  messages     Message[]     @relation("chat")
  participants Participant[]
}

model Participant {
  userID String
  chatID String
  chat   Chat   @relation(fields: [chatID], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([chatID])
  @@index([userID])
  @@id([userID, chatID])
}

model Message {
  id         String            @id @default(uuid())
  senderID   String
  chatID     String
  text       String            @db.VarChar(280)
  datePosted DateTime          @default(now())
  received   Boolean           @default(false)
  chat       Chat              @relation("chat", fields: [chatID], references: [id], onDelete: Cascade)
  sender     User              @relation("sender", fields: [senderID], references: [id], onDelete: Cascade)
  cipher     MessageCipherKey? @relation("message")

  @@index([chatID])
  @@index([senderID])
}

model MessageCipherKey {
  messageID String  @id
  message   Message @relation("message", fields: [messageID], references: [id], onDelete: Cascade)
  key       String  @db.VarChar(280)
}

model SavedJob {
  link        String
  userID      String
  title       String
  employer    String
  location    String
  description String
  type        String
  dateAdded   DateTime @default(now())
  user        User     @relation("user", fields: [userID], references: [id], onDelete: Cascade)

  @@id([userID, link])
}

// TODO: add image file size and name functionality
model Image {
  imageRef String @id
  image String
  name String
  size Int
}