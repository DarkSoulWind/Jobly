generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  email         String?          @unique
  emailVerified DateTime?
  id            String           @id @default(cuid())
  image         String?          @default("https://i.pinimg.com/236x/8e/73/0c/8e730ce55fb0199e7dc0bf76672e8dc6.jpg")
  name          String           @unique
  password      String?
  phoneNumber   String?
  online        Boolean          @default(false)
  accounts      Account[]
  Comments      Comments[]
  following     Follows[]        @relation("follower")
  followers     Follows[]        @relation("following")
  interests     Interests[]
  SentMessages  Message[]        @relation("sender")
  Participants  Participant[]
  postLikes     PostLikes[]
  posts         Posts[]
  sessions      Session[]
  preferences   UserPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreferences {
  PreferencesID Int     @id @unique @default(autoincrement())
  UserID        String  @unique
  FirstName     String?
  LastName      String?
  Pronouns      String?
  CountryRegion String?
  PostalCode    String?
  City          String?
  School        String?
  PhoneType     String?
  Banner        String? @default("https://swall.teahub.io/photos/small/303-3034192_default-banner-banner-jpg.jpg")
  Bio           String?
  User          User    @relation(fields: [UserID], references: [id], onDelete: Cascade)
}

model Posts {
  PostID     Int         @id @default(autoincrement())
  UserID     String      
  DatePosted DateTime
  PostText   String      @db.Text
  Image      String?
  ImageRef   String?
  User       User        @relation(fields: [UserID], references: [id], onDelete: Cascade)
  Comments   Comments[]
  PostLikes  PostLikes[]
}

model PostLikes {
  LikeID Int    @id @default(autoincrement())
  UserID String
  PostID Int
  Post   Posts  @relation(fields: [PostID], references: [PostID], onDelete: Cascade)
  User   User   @relation(fields: [UserID], references: [id], onDelete: Cascade)

  @@index([PostID], map: "PostLikes_PostID_fkey")
  @@index([UserID], map: "PostLikes_UserID_fkey")
}

model Interests {
  InterestID Int    @id @default(autoincrement())
  UserID     String
  Name       String
  User       User   @relation(fields: [UserID], references: [id], onDelete: Cascade)

  @@index([UserID], map: "Interests_UserID_fkey")
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@index([followingId], map: "Follows_followingId_fkey")
}

model Comments {
  CommentID   Int      @id @default(autoincrement())
  UserID      String
  PostID      Int
  CommentText String
  DatePosted  DateTime
  Post        Posts    @relation(fields: [PostID], references: [PostID], onDelete: Cascade)
  User        User     @relation(fields: [UserID], references: [id], onDelete: Cascade)

  @@index([PostID], map: "Comments_PostID_fkey")
  @@index([UserID], map: "Comments_UserID_fkey")
}

model Chat {
  ChatID       String        @id @default(uuid())
  Name         String
  Messages     Message[]
  Participants Participant[]
}

model Participant {
  ParticipantID Int    @id @default(autoincrement())
  UserID        String
  ChatID        String
  Chat          Chat   @relation(fields: [ChatID], references: [ChatID], onDelete: Cascade)
  User          User   @relation(fields: [UserID], references: [id], onDelete: Cascade)

  @@index([ChatID], map: "Participant_ChatID_fkey")
  @@index([UserID], map: "Participant_UserID_fkey")
}

model Message {
  MessageID  String   @id @default(cuid())
  SenderID   String
  ChatID     String
  Text       String
  DatePosted DateTime @default(now())
  Received   Boolean  @default(false)
  Chat       Chat     @relation(fields: [ChatID], references: [ChatID], onDelete: Cascade)
  Sender     User     @relation("sender", fields: [SenderID], references: [id], onDelete: Cascade)

  @@index([ChatID], map: "Message_ChatID_fkey")
  @@index([SenderID], map: "Message_SenderID_fkey")
}
